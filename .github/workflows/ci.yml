name: CI

on:
  push:
    branches:
      - main
  pull_request:
    # No branches specified = all PRs
  schedule:
    - cron: '0 0 * * 1'  # Weekly security checks

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-deny
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-deny@0.17.0

    - name: Install cargo-outdated
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-outdated@0.17
    
    - name: Check dependencies with cargo-deny
      run: cargo deny check
    
    - name: Check for outdated dependencies
      run: cargo outdated --depth 1 --color always --exit-code 1
      continue-on-error: ${{ github.event_name == 'pull_request' }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Build all tests
      run: cargo test --no-run --all-features
    
    - name: Run tests
      run: cargo nextest run --all-features
    
    - name: Run integration tests
      run: cargo test --test integration_tests -- --nocapture
    
    - name: Run cursor-agent integration tests (basic)
      run: |
        # Run basic cursor-agent tests that don't require API key
        cargo test --test cursor_agent_integration_tests test_cursor_agent_cli -- --nocapture
      continue-on-error: true
    
    - name: Run doc tests
      run: cargo test --all-features --doc
    
    - name: Build release binary
      run: cargo build --release

  cursor-agent-integration:
    name: Cursor Agent Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Cursor CLI
      run: |
        curl https://cursor.com/install -fsS | bash
        echo "$HOME/.cursor/bin" >> $GITHUB_PATH
    
    - name: Verify cursor-agent installation
      run: |
        cursor-agent --version
        echo "cursor-agent installed successfully"
    
    - name: Run cursor-agent integration tests
      env:
        CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      run: |
        # Run only the cursor-agent integration tests
        cargo test --test cursor_agent_integration_tests -- --nocapture
      continue-on-error: true  # Allow to fail if API key is not available
    
    - name: Test cursor-agent basic functionality
      env:
        CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      run: |
        # Test basic cursor-agent functionality
        cursor-agent -p "Hello, this is a test prompt" --model gpt-4
      continue-on-error: true  # Allow to fail if API key is not available

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit@0.21
    
    - name: Run security audit
      run: cargo audit --deny warnings
      continue-on-error: ${{ github.event.schedule != '' }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --document-private-items --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true
